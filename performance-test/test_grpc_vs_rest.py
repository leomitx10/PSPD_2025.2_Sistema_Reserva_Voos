"""
Script para comparar performance entre gRPC e REST

Executa 4 cen√°rios de teste:
1. Requisi√ß√£o simples (poucos filtros)
2. Requisi√ß√£o complexa (muitos filtros)
3. Alto volume de requisi√ß√µes
4. Transfer√™ncia de grande volume de dados
"""

import time
import requests
import grpc
import statistics
import sys
import os

# Adicionar path dos protos
sys.path.append('../Voos')
sys.path.append('../Hoteis/proto')

import voos_service_pb2
import voos_service_pb2_grpc

def test_grpc_voos_simples(n_requests=10):
    """Cen√°rio 1: Requisi√ß√£o simples - gRPC"""
    times = []

    with grpc.insecure_channel('localhost:50051') as channel:
        stub = voos_service_pb2_grpc.VoosServiceStub(channel)

        for _ in range(n_requests):
            request = voos_service_pb2.ConsultaVoosRequest(
                origem="S√£o Paulo",
                destino="Rio de Janeiro"
            )

            start = time.time()
            try:
                response = stub.ConsultarVoos(request)
                elapsed = time.time() - start
                times.append(elapsed * 1000)  # Converter para ms
            except grpc.RpcError as e:
                print(f"Erro gRPC: {e.details()}")
                continue

    return times

def test_rest_voos_simples(n_requests=10):
    """Cen√°rio 1: Requisi√ß√£o simples - REST"""
    times = []
    url = "http://localhost:5001/voos/search"

    for _ in range(n_requests):
        payload = {
            "origem": "S√£o Paulo",
            "destino": "Rio de Janeiro"
        }

        start = time.time()
        try:
            response = requests.post(url, json=payload, timeout=10)
            elapsed = time.time() - start
            if response.status_code == 200:
                times.append(elapsed * 1000)
        except requests.exceptions.RequestException as e:
            print(f"Erro REST: {e}")
            continue

    return times

def test_grpc_voos_complexo(n_requests=10):
    """Cen√°rio 2: Requisi√ß√£o complexa - gRPC"""
    times = []

    with grpc.insecure_channel('localhost:50051') as channel:
        stub = voos_service_pb2_grpc.VoosServiceStub(channel)

        for _ in range(n_requests):
            request = voos_service_pb2.ConsultaVoosRequest(
                origem="S√£o Paulo",
                destino="Rio de Janeiro",
                data="2025-11-15",
                preco_max=800.0,
                companhia_aerea="LATAM",
                faixa_horario="manha",
                ordenacao="preco"
            )

            start = time.time()
            try:
                response = stub.ConsultarVoos(request)
                elapsed = time.time() - start
                times.append(elapsed * 1000)
            except grpc.RpcError as e:
                print(f"Erro gRPC: {e.details()}")
                continue

    return times

def test_rest_voos_complexo(n_requests=10):
    """Cen√°rio 2: Requisi√ß√£o complexa - REST"""
    times = []
    url = "http://localhost:5001/voos/search"

    for _ in range(n_requests):
        payload = {
            "origem": "S√£o Paulo",
            "destino": "Rio de Janeiro",
            "data": "2025-11-15",
            "preco_max": 800.0,
            "companhia_aerea": "LATAM",
            "faixa_horario": "manha",
            "ordenacao": "preco"
        }

        start = time.time()
        try:
            response = requests.post(url, json=payload, timeout=10)
            elapsed = time.time() - start
            if response.status_code == 200:
                times.append(elapsed * 1000)
        except requests.exceptions.RequestException as e:
            print(f"Erro REST: {e}")
            continue

    return times

def test_grpc_alto_volume(n_requests=50):
    """Cen√°rio 3: Alto volume - gRPC"""
    return test_grpc_voos_simples(n_requests)

def test_rest_alto_volume(n_requests=50):
    """Cen√°rio 3: Alto volume - REST"""
    return test_rest_voos_simples(n_requests)

def calcular_estatisticas(times):
    """Calcula estat√≠sticas dos tempos de resposta"""
    if not times:
        return {
            'min': 0,
            'max': 0,
            'media': 0,
            'mediana': 0,
            'desvio_padrao': 0
        }

    return {
        'min': min(times),
        'max': max(times),
        'media': statistics.mean(times),
        'mediana': statistics.median(times),
        'desvio_padrao': statistics.stdev(times) if len(times) > 1 else 0
    }

def exibir_resultados(nome_cenario, stats_grpc, stats_rest):
    """Exibe compara√ß√£o entre gRPC e REST"""
    print(f"\n{'=' * 80}")
    print(f"CEN√ÅRIO: {nome_cenario}")
    print('=' * 80)

    print(f"\n{'M√©trica':<20} {'gRPC (ms)':<15} {'REST (ms)':<15} {'Diferen√ßa (%)':<15}")
    print('-' * 80)

    metricas = ['min', 'max', 'media', 'mediana', 'desvio_padrao']
    labels = ['M√≠nimo', 'M√°ximo', 'M√©dia', 'Mediana', 'Desvio Padr√£o']

    for metrica, label in zip(metricas, labels):
        grpc_val = stats_grpc[metrica]
        rest_val = stats_rest[metrica]

        if rest_val > 0:
            diff = ((rest_val - grpc_val) / rest_val) * 100
        else:
            diff = 0

        print(f"{label:<20} {grpc_val:<15.2f} {rest_val:<15.2f} {diff:<15.2f}")

    if stats_grpc['media'] > 0:
        speedup = stats_rest['media'] / stats_grpc['media']
        print(f"\nSpeedup do gRPC: {speedup:.2f}x mais r√°pido")

def main():
    print("\n" + "=" * 80)
    print("COMPARATIVO DE PERFORMANCE: gRPC vs REST")
    print("=" * 80)
    print("\nCertifique-se de que os seguintes servi√ßos est√£o rodando:")
    print("  - Servidor gRPC de Voos (porta 50051)")
    print("  - Servidor REST de Voos (porta 5001)")
    print("\n" + "=" * 80)

    input("\nPressione ENTER para iniciar os testes...")

    # Cen√°rio 1: Requisi√ß√£o Simples
    print("\n\nüîÑ Executando Cen√°rio 1: Requisi√ß√£o Simples (10 requisi√ß√µes)...")
    grpc_times_1 = test_grpc_voos_simples(10)
    rest_times_1 = test_rest_voos_simples(10)
    exibir_resultados(
        "Requisi√ß√£o Simples (poucos filtros)",
        calcular_estatisticas(grpc_times_1),
        calcular_estatisticas(rest_times_1)
    )

    # Cen√°rio 2: Requisi√ß√£o Complexa
    print("\n\nüîÑ Executando Cen√°rio 2: Requisi√ß√£o Complexa (10 requisi√ß√µes)...")
    grpc_times_2 = test_grpc_voos_complexo(10)
    rest_times_2 = test_rest_voos_complexo(10)
    exibir_resultados(
        "Requisi√ß√£o Complexa (muitos filtros)",
        calcular_estatisticas(grpc_times_2),
        calcular_estatisticas(rest_times_2)
    )

    # Cen√°rio 3: Alto Volume
    print("\n\nüîÑ Executando Cen√°rio 3: Alto Volume (50 requisi√ß√µes)...")
    grpc_times_3 = test_grpc_alto_volume(50)
    rest_times_3 = test_rest_alto_volume(50)
    exibir_resultados(
        "Alto Volume de Requisi√ß√µes",
        calcular_estatisticas(grpc_times_3),
        calcular_estatisticas(rest_times_3)
    )

    # Cen√°rio 4: Grande Volume de Dados (similar ao cen√°rio 1 mas contando dados)
    print("\n\nüîÑ Executando Cen√°rio 4: Transfer√™ncia de Grandes Volumes...")
    grpc_times_4 = test_grpc_voos_simples(10)
    rest_times_4 = test_rest_voos_simples(10)
    exibir_resultados(
        "Transfer√™ncia de Grande Volume de Dados",
        calcular_estatisticas(grpc_times_4),
        calcular_estatisticas(rest_times_4)
    )

    print("\n\n" + "=" * 80)
    print("CONCLUS√ïES:")
    print("=" * 80)
    print("""
1. gRPC geralmente apresenta menor lat√™ncia devido ao uso de HTTP/2 e serializa√ß√£o bin√°ria
2. REST √© mais adequado para APIs p√∫blicas e integra√ß√£o com navegadores
3. gRPC √© superior para comunica√ß√£o entre microservi√ßos internos
4. A diferen√ßa de performance √© mais evidente em alto volume de requisi√ß√µes
    """)

if __name__ == '__main__':
    main()
